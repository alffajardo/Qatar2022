matches <- drive_find(pattern = "matches",type = "spreadsheet",n_max=1)$id
matches <- read_sheet(matches) %>%
filter(complete.cases(.)) %>%
mutate(GD = abs(Goals_Local - Goals_Visitor),
Score = paste(Goals_Local,"-",Goals_Visitor,sep=""))
GS3_picks2 <- select(GS3_picks,-c(1,2))
GS3 <- matches %>%
filter (Round == "M3") %>%
select(Result) %>%
as.vector() %>%
unlist()
match_names <- names(GS3_picks2)[1:length(GS3)]
# temporalmente se dejarÃ¡ asi
GS3_all <- map_dfc(1:length(GS3),~if_else( GS3[.x] == GS3_picks2[,.x],true = 1,0)) %>%
set_names(match_names)
GS3 <- rowSums(GS3_all)
scores_GS3 <- data.frame(numero_participante,Nombre,GS3_all)
# Calificar la roinda de octavos
KO8_picks <- read_csv("KO8_picks.csv")
KO8_picks[21,1:2] <- ""
KO8_picks2 <- select(KO8_picks,-c(1,2))
KO8 <- matches %>%
filter (Round == "KO8") %>%
select(Result) %>%
as.vector() %>%
unlist()
match_names <- names(KO8_picks2)[1:length(KO8)]
KO8_all <- map_dfc(1:length(KO8),~if_else( KO8[.x] == KO8_picks2[,.x],true = 1,0)) %>%
set_names(match_names)
KO8 <- rowSums(KO8_all,na.rm = T)
scores_KO8 <- data.frame(numero_participante,Nombre,KO8_all)
KO8_goals <- matches %>%
filter(Round == "KO8") %>%
select(Score) %>%
as.vector() %>%
unlist()
KO8_predicted_scores <- read_csv("KO8_predicted_scores.csv") %>%
select(-c(1:2))
KO8_predicted_scores[21,1:2] <- ""
KO8_score_bonus <- map_dfc(1:length(KO8_goals),~if_else( KO8_goals[.x] == KO8_predicted_scores[,.x],true = 1,0)) %>%
set_names(match_names)
KO8_goals <- matches %>%
filter(Round == "KO8") %>%
select(Score) %>%
as.vector() %>%
unlist()
KO8_predicted_scores <- read_csv("KO8_predicted_scores.csv") %>%
select(-c(1:2))
View(KO8_predicted_scores)
View(KO8_predicted_scores)
KO8 <- rowSums(KO8_all,na.rm = T)
scores_KO8 <- data.frame(numero_participante,Nombre,KO8_all)
KO8_goals <- matches %>%
filter(Round == "KO8") %>%
select(Score) %>%
as.vector() %>%
unlist()
KO8_predicted_scores <- read_csv("KO8_predicted_scores.csv") %>%
select(-c(1:2))
KO8_predicted_scores[21,1:2] <- ""
KO8_score_bonus <- map_dfc(1:length(KO8_goals),~if_else( KO8_goals[.x] == KO8_predicted_scores[,.x],true = 1,0)) %>%
set_names(match_names)
KO8_bonus <- rowSums(KO8_score_bonus,na.rm = T)
KO8_score_bonus <- data.frame(numero_participante,Nombre,KO8_score_bonus)
KO4_picks <- read_csv("KO4_picks.csv")
KO4_picks2 <- select(KO4_picks,-c(1,2))
KO4 <- matches %>%
filter (Round == "KO4") %>%
select(Result) %>%
as.vector() %>%
unlist()
match_names <- names(KO4_picks2)[1:length(KO4)]
KO4_all <- map_dfc(1:length(KO4),~if_else( KO4[.x] == KO4_picks2[,.x],true = 1,0)) %>%
set_names(match_names)
View(KO4_all)
View(KO4_all)
KO4 <- rowSums(KO4_all,na.rm = T)
scores_KO4 <- data.frame(numero_participante,Nombre,KO4_all)
KO4_goals <- matches %>%
filter(Round == "KO4") %>%
select(Score) %>%
as.vector() %>%
unlist()
KO4_predicted_scores <- read_csv("KO4_predicted_scores.csv") %>%
select(-c(1:2))
View(KO4_predicted_scores)
View(KO4_predicted_scores)
KO4_score_bonus <- map_dfc(1:length(KO4_goals),~if_else( KO4_goals[.x] == KO4_predicted_scores[,.x],true = 1,0)) %>%
set_names(match_names)
KO4_bonus <- rowSums(KO4_score_bonus,na.rm = T)
KO4_score_bonus <- data.frame(numero_participante,Nombre,KO4_score_bonus)
### Escribir el output
scores <- data.frame(numero_participante,Nombre, GS1,GS2,GS3,KO8,KO8_bonus,kO4,
KO4_bonus) %>%
group_by (numero_participante)
KO4 <- rowSums(KO4_all,na.rm = T)
scores_KO4 <- data.frame(numero_participante,Nombre,KO4_all)
KO4_goals <- matches %>%
filter(Round == "KO4") %>%
select(Score) %>%
as.vector() %>%
unlist()
KO4_predicted_scores <- read_csv("KO4_predicted_scores.csv") %>%
select(-c(1:2))
### Escribir el output
scores <- data.frame(numero_participante,Nombre, GS1,GS2,GS3,
KO8,KO8_bonus,
KO4, KO4_bonus) %>%
group_by (numero_participante)
scores <- scores %>%
mutate(Total = sum(GS1,GS2,GS3,KO8,KO8_bonus,KO4,K04_bonus,
na.rm = T)) %>%
ungroup %>%
arrange(desc(Total),numero_participante)
KO4_bonus <- rowSums(KO4_score_bonus,na.rm = T)
scores <- scores %>%
mutate(Total = sum(GS1,GS2,GS3,KO8,KO8_bonus,KO4,KO4_bonus,
na.rm = T)) %>%
ungroup %>%
arrange(desc(Total),numero_participante)
write.table(scores,"Overall_scores.csv",quote = F,sep=",",row.names = F)
write.table(scores_GS1, "GS1_complete_scores.csv",sep = ",",
quote = F ,row.names = F )
write.table(scores_GS2, "GS2_complete_scores.csv",sep = ",",
quote = F ,row.names = F )
write.table(scores_GS3, "GS3_complete_scores.csv",sep = ",",
quote = F ,row.names = F )
write.table(scores_KO8, "KO8_complete_scores.csv",sep = ",",
quote = F ,row.names = F )
write.table(KO8_score_bonus, "KO8_complete_bonus.csv",sep = ",",
quote = F ,row.names = F )
source("~/Documents/GitHub/Qatar2022/score_picks.R", echo=TRUE)
scores
full_join(scores_GS1,scores_GS2)
full_join(scores_GS1,scores_GS2,scores_GS3)
full_join(scores_GS1,scores_GS2,scores_GS3)
View(scores_GS3)
View(scores_GS3)
full_join(scores_GS1,scores_GS2,scores_GS3)
bind_cols(scores_GS1,scores_GS2,scores_GS3)
bind_cols(scores_GS1,scores_GS2,scores_GS3,scores_GS4)
matches
ncol / matches
nrow(matches)
scores
scores %>%
select(1:2,!ends_with("bonus"))
select(,!ends_with(c("bonus","Total"))
select(-c(1,2),!ends_with(c("bonus","Total"))
select(-c(1,2),!ends_with(c("bonus","Total"))
scores %>%
select(c(1,2),!ends_with(c("bonus","Total"))
scores %>%
scores %>%
!ends_with(c("bonus","Total"))
select(-c(1:2),!ends_with(c("bonus","Total"))
select(!ends_with(c("bonus","Total"))
scores %>%
scores %>%
select(-c(1,2,ncol(.)))
scores %>%
select(-c(1,2,ncol(.)))
scores %>%
select(-c(1,2,ncol(.))) %>%
select(ends_with("bonus"))
scores %>%
select(-c(1,2,ncol(.))) %>%
select(!ends_with("bonus"))
scores %>%
select(-c(1,2,ncol(.))) %>%
select(!ends_with("bonus")) %>%
rowSums()
scores %>%
select(-c(1,2,ncol(.))) %>%
select(!ends_with("bonus")) %>%
rowSums() / nrow(matches)
scores %>%
arrange(numero_participante) #%>%
scores %>%
arrange(numero_participante) %>%
select(-c(1,2,ncol(.))) %>%
select(!ends_with("bonus")) %>%
rowSums() / nrow(matches)
scores %>%
arrange(numero_participante) %>%
select(-c(1,2,ncol(.))) %>%
select(!ends_with("bonus")) %>%
rowSums() / nrow(matches) *100
scores %>%
arrange(numero_participante) %>%
select(-c(1,2,ncol(.))) %>%
select(!ends_with("bonus")) %>%
rowSums() / nrow(matches) *100 %>%
set_names(numero_participante)
accuracy <-
scores %>%
arrange(numero_participante) %>%
select(-c(1,2,ncol(.))) %>%
select(!ends_with("bonus")) %>%
rowSums() / nrow(matches) *100
names(accuracy) <- Nombre
accuracy
accuracy <- sort(accuracy,decreasing = T)
barplot(accuracy)
barplot(accuracy,ylim = c(0,100))
barplot(accuracy,ylim = c(0,100),col=viridis::viridis(24))
barplot(accuracy,ylim = c(0,100),col=viridis::rev(viridis(24))
barplot(accuracy,ylim = c(0,100),col=viridis::rev(viridis(24))
barplot(accuracy,ylim = c(0,100),col=rev(viridis::(viridis(24))
barplot(accuracy,ylim = c(0,100),col=rev(viridis::(viridis(24)))
barplot(accuracy,ylim = c(0,100),col=rev(viridis::viridis(24)))
barplot(accuracy,ylim = c(0,100),col=rev(viridis::plasma(24)))
par()$las
par(las = 45)
barplot(accuracy,ylim = c(0,100),col=rev(viridis::plasma(24)))
barplot(accuracy,ylim = c(0,70),col=rev(viridis::plasma(24)))
names(accuracy) <- numero_participante
accuracy <- sort(accuracy,decreasing = T)
par(las = 45)
barplot(accuracy,ylim = c(0,70),col=rev(viridis::plasma(24)))
barplot(accuracy,ylim = c(0,70),col=rev(viridis::cividis(24)),
Main = "Porcentajes de precision",xlab = 'participante')
barplot(accuracy,ylim = c(0,70),col=rev(viridis::magma(24)),
Main = "Porcentajes de precision",xlab = 'participante')
barplot(accuracy,ylim = c(0,70),col=rev(viridis::rocket(24)),
Main = "Porcentajes de precision",xlab = 'participante')
barplot(accuracy,ylim = c(0,70),col=rev(viridis::turbo(24)),
Main = "Porcentajes de precision",xlab = 'participante')
barplot(accuracy,ylim = c(0,70),col=rev(viridis::inferno(24)),
Main = "Porcentajes de precision",xlab = 'participante')
barplot(accuracy,ylim = c(0,70),col=rev(viridis::plasma(24)),
Main = "Porcentajes de precision",xlab = 'participante')
barplot(accuracy,ylim = c(0,70),col=rev(viridis::cividis(24)),
Main = "Porcentajes de precision",xlab = 'participante')
barplot(accuracy,ylim = c(0,70),col=rev(viridis::viridis(24)),
Main = "Porcentajes de precision",xlab = 'participante')
barplot(accuracy,ylim = c(0,70),col=rev(viridis::viridis(24)),
Main = "Porcentajes de precision",xlab = 'participante',axes = F)
axis(1,at = 1:24)
axis(1,at = 0,24)
accuracy <- sort(accuracy,decreasing = T)
barplot(accuracy,ylim = c(0,70),col=rev(viridis::viridis(24)),
Main = "Porcentajes de precision",xlab = 'participante',axes = F)
barplot(accuracy,ylim = c(0,70),col=rev(viridis::viridis(24)),
Main = "Porcentajes de precision",xlab = 'participante',axes = F)
axis(1,at = 0,24)
accuracy <- sort(accuracy,decreasing = T)
barplot(accuracy,ylim = c(0,70),col=rev(viridis::viridis(24)),
main = "Porcentajes de precision",xlab = 'participante',axes = F)
axis(1,at = 0,24)
accuracy <- scores %>%
arrange(numero_participante) %>%
select(-c(1,2,ncol(.))) %>%
select(!ends_with("bonus")) %>%
rowSums() / nrow(matches) *100
names(accuracy) <- numero_participante
accuracy <- sort(accuracy,decreasing = T)
barplot(accuracy,ylim = c(0,70),col=rev(viridis::viridis(24)),
main = "Porcentajes de precision",xlab = 'participante',axes = F)
barplot(accuracy,ylim = c(0,70),col=rev(viridis::viridis(24)),
main = "Porcentajes de precision",xlab = 'participante',axes = F,las = 45)
accuracy <- sort(accuracy,decreasing = T)
barplot(accuracy,ylim = c(0,70),col=rev(viridis::viridis(24)),
main = "Porcentajes de precision",xlab = 'participante',axes = F,las = 45)
barplot(accuracy,ylim = c(0,70),col=rev(viridis::viridis(24)),
main = "Porcentajes de precision",xlab = 'participante',axes = F,srt = 45)
barplot(accuracy,ylim = c(0,70),col=rev(viridis::viridis(24)),
main = "Porcentajes de precision",xlab = 'participante',axes = F,srt = 90)
names(accuracy)
accuracy <- scores %>%
arrange(numero_participante) %>%
select(-c(1,2,ncol(.))) %>%
select(!ends_with("bonus")) %>%
rowSums() / nrow(matches) *100
names(accuracy) <- numero_participante
accuracy <- sort(accuracy,decreasing = T)
barplot(accuracy,ylim = c(0,70),col=rev(viridis::viridis(24)),
main = "Porcentajes de precision",xlab = 'participante',axes = F,srt = 90)
names(accuracy)
barplot(accuracy,ylim = c(0,70),col=rev(viridis::viridis(24)),
main = "Porcentajes de precision",xlab = 'participante',axes = F,srt = 90,h = T)
barplot(accuracy,ylim = c(0,70),col=rev(viridis::viridis(24)),
main = "Porcentajes de precision",xlab = 'participante',axes = F,srt = 90,horiz = T)
barplot(accuracy,xlim = c(0,70),col=rev(viridis::viridis(24)),
main = "Porcentajes de precision",xlab = 'participante',axes = F,srt = 90,horiz = T)
accuracy <- scores %>%
arrange(numero_participante) %>%
select(-c(1,2,ncol(.))) %>%
select(!ends_with("bonus")) %>%
rowSums() / nrow(matches) *100
names(accuracy) <- numero_participante
accuracy <- sort(accuracy)
barplot(accuracy,xlim = c(0,70),col=rev(viridis::viridis(24)),
main = "Porcentajes de precision",xlab = 'participante',axes = F,srt = 90,horiz = T)
names(accuracy)
barplot(accuracy,xlim = c(0,70),col=viridis::viridis(24),
main = "Porcentajes de precision",xlab = 'participante',axes = F,srt = 90,horiz = T)
barplot(accuracy,xlim = c(0,70),col=viridis::viridis(24),
main = "Porcentajes de precision",xlab = 'participante',axes = T,srt = 90,horiz = T)
par(las = 2)
accuracy <- sort(accuracy)
barplot(accuracy,xlim = c(0,70),col=viridis::viridis(24),
main = "Porcentajes de precision",xlab = 'participante',axes = T,srt = 90,horiz = T)
names(accuracy)
Nombre
Nombre %>%
str_split_fixed(pattern = " ")
str_split_fixed(pattern = " ", n = 1)
str_split_fixed(Nombre, pattern = " ", n = 1)
str_split_fixed(Nombre, pattern = " ", n = 3)
str_split_fixed(Nombre, pattern = " ", n = 2)
str_split_fixed(Nombre, pattern = " ", n = 3)
str_split_fixed(Nombre, pattern = " ", n = 4)
str_split_fixed(Nombre, pattern = " ", n = 4) [1,]
str_split_fixed(Nombre, pattern = " ", n = 4) [,1]
names(accuracy) <- str_split_fixed(Nombre, pattern = " ", n = 4) [,1]
par(las = 2)
accuracy <- sort(accuracy)
barplot(accuracy,xlim = c(0,70),col=viridis::viridis(24),
main = "Porcentajes de precision",xlab = 'participante',axes = T,srt = 90,horiz = T)
names(accuracy)
accuracy <- scores %>%
arrange(numero_participante) %>%
select(-c(1,2,ncol(.))) %>%
select(!ends_with("bonus")) %>%
rowMeans() / nrow(matches) *100
names(accuracy) <- str_split_fixed(Nombre, pattern = " ", n = 4) [,1]
par(las = 2, mar = c(1,1,1,1))
accuracy <- sort(accuracy)
barplot(accuracy,xlim = c(0,70),col=viridis::viridis(24),
main = "Porcentajes de precision",xlab = 'participante',axes = T,srt = 90,horiz = T)
names(accuracy)
accuracy <- scores %>%
arrange(numero_participante) %>%
select(-c(1,2,ncol(.))) %>%
select(!ends_with("bonus")) %>%
rowMeans() / nrow(matches) *100
names(accuracy) <- str_split_fixed(Nombre, pattern = " ", n = 4) [,1]
par(las = 2,)
accuracy <- sort(accuracy)
barplot(accuracy,xlim = c(0,70),col=viridis::viridis(24),
main = "Porcentajes de precision",xlab = 'participante',axes = T,srt = 90,horiz = T,xpd = T)
names(accuracy)
accuracy <- scores %>%
arrange(numero_participante) %>%
select(-c(1,2,ncol(.))) %>%
select(!ends_with("bonus")) %>%
rowMeans() / nrow(matches) *100
names(accuracy) <- str_split_fixed(Nombre, pattern = " ", n = 4) [,1]
par(las = 2,)
accuracy <- sort(accuracy)
barplot(accuracy,xlim = c(0,70),col=viridis::viridis(24),
main = "Porcentajes de precision",xlab = 'participante',axes = T,srt = 90,horiz = T,xpd = T)
names(accuracy)
accuracy
matches_n <- c(16,16,16,8,4)
accuracy <- scores %>%
arrange(numero_participante) %>%
select(-c(1,2,ncol(.))) %>%
select(!ends_with("bonus")) %>%
rowMeans() / matches_n  *100
accuracy <- scores %>%
arrange(numero_participante) %>%
select(-c(1,2,ncol(.))) %>%
select(!ends_with("bonus"))
accuracy
library(googlesheets4)
library(googledrive)
library(dplyr)
library(tidyr)
library(readr)
library(purrr)
# read the data
options(gargle_oauth_email = TRUE)
drive_auth(email = TRUE)
# Calificar la ronda 1
GS1_picks <- read_csv("GS1_picks.csv")
matches <- drive_find(pattern = "matches",type = "spreadsheet",n_max=1)$id
matches <- read_sheet(matches) %>%
filter(complete.cases(.)) %>%
mutate(GD = abs(Goals_Local - Goals_Visitor))
drive_auth()
# Calificar la ronda 1
GS1_picks <- read_csv("GS1_picks.csv")
matches <- drive_find(pattern = "matches",type = "spreadsheet",n_max=1)$id
matches <- read_sheet(matches) %>%
filter(complete.cases(.)) %>%
mutate(GD = abs(Goals_Local - Goals_Visitor))
GS1_picks2 <- select(GS1_picks,-c(1,2))
GS1 <- matches %>%
filter (Round == "M1") %>%
select(Result) %>%
as.vector() %>%
unlist()
attach(GS1_picks)
match_names <- names(GS1_picks2)[1:length(GS1)]
# temporalmente se dejarÃ¡ asi
GS1_all <- map_dfc(1:length(GS1),~if_else( GS1[.x] == GS1_picks2[,.x],true = 1,0)) %>%
set_names(match_names)
GS1 <- rowSums(GS1_all)
scores_GS1 <- data.frame(numero_participante,Nombre,GS1_all)
# Calificar la ronda 2
GS2_picks <- read_csv("GS2_picks.csv")
matches <- drive_find(pattern = "matches",type = "spreadsheet",n_max=1)$id
matches <- read_sheet(matches) %>%
filter(complete.cases(.)) %>%
mutate(GD = abs(Goals_Local - Goals_Visitor))
GS2_picks2 <- select(GS2_picks,-c(1,2))
GS2 <- matches %>%
filter (Round == "M2") %>%
select(Result) %>%
as.vector() %>%
unlist()
match_names <- names(GS2_picks2)[1:length(GS2)]
# temporalmente se dejarÃ¡ asi
GS2_all <- map_dfc(1:length(GS2),~if_else( GS2[.x] == GS2_picks2[,.x],true = 1,0)) %>%
set_names(match_names)
GS2 <- rowSums(GS2_all)
scores_GS2 <- data.frame(numero_participante,Nombre,GS2_all)
# Calificar la ronda 3
GS3_picks <- read_csv("GS3_picks.csv")
matches <- drive_find(pattern = "matches",type = "spreadsheet",n_max=1)$id
matches <- read_sheet(matches) %>%
filter(complete.cases(.)) %>%
mutate(GD = abs(Goals_Local - Goals_Visitor),
Score = paste(Goals_Local,"-",Goals_Visitor,sep=""))
GS3_picks2 <- select(GS3_picks,-c(1,2))
GS3 <- matches %>%
filter (Round == "M3") %>%
select(Result) %>%
as.vector() %>%
unlist()
match_names <- names(GS3_picks2)[1:length(GS3)]
# temporalmente se dejarÃ¡ asi
GS3_all <- map_dfc(1:length(GS3),~if_else( GS3[.x] == GS3_picks2[,.x],true = 1,0)) %>%
set_names(match_names)
GS3 <- rowSums(GS3_all)
scores_GS3 <- data.frame(numero_participante,Nombre,GS3_all)
# Calificar la roinda de octavos
KO8_picks <- read_csv("KO8_picks.csv")
KO8_picks[21,1:2] <- ""
KO8_picks2 <- select(KO8_picks,-c(1,2))
KO8 <- matches %>%
filter (Round == "KO8") %>%
select(Result) %>%
as.vector() %>%
unlist()
match_names <- names(KO8_picks2)[1:length(KO8)]
KO8_all <- map_dfc(1:length(KO8),~if_else( KO8[.x] == KO8_picks2[,.x],true = 1,0)) %>%
set_names(match_names)
KO8 <- rowSums(KO8_all,na.rm = T)
scores_KO8 <- data.frame(numero_participante,Nombre,KO8_all)
KO8_goals <- matches %>%
filter(Round == "KO8") %>%
select(Score) %>%
as.vector() %>%
unlist()
KO8_predicted_scores <- read_csv("KO8_predicted_scores.csv") %>%
select(-c(1:2))
KO8_predicted_scores[21,1:2] <- ""
KO8_score_bonus <- map_dfc(1:length(KO8_goals),~if_else( KO8_goals[.x] == KO8_predicted_scores[,.x],true = 1,0)) %>%
set_names(match_names)
KO8_bonus <- rowSums(KO8_score_bonus,na.rm = T)
KO8_score_bonus <- data.frame(numero_participante,Nombre,KO8_score_bonus)
KO4_picks <- read_csv("KO4_picks.csv")
KO4_picks2 <- select(KO4_picks,-c(1,2))
KO4 <- matches %>%
filter (Round == "KO4") %>%
select(Result) %>%
as.vector() %>%
unlist()
match_names <- names(KO4_picks2)[1:length(KO4)]
KO4_all <- map_dfc(1:length(KO4),~if_else( KO4[.x] == KO4_picks2[,.x],true = 1,0)) %>%
set_names(match_names)
KO4 <- rowSums(KO4_all,na.rm = T)
scores_KO4 <- data.frame(numero_participante,Nombre,KO4_all)
KO4_goals <- matches %>%
filter(Round == "KO4") %>%
select(Score) %>%
as.vector() %>%
unlist()
KO4_predicted_scores <- read_csv("KO4_predicted_scores.csv") %>%
select(-c(1:2))
KO4_score_bonus <- map_dfc(1:length(KO4_goals),~if_else( KO4_goals[.x] == KO4_predicted_scores[,.x],true = 1,0)) %>%
set_names(match_names)
KO4_bonus <- rowSums(KO4_score_bonus,na.rm = T)
KO4_score_bonus <- data.frame(numero_participante,Nombre,KO4_score_bonus)
### Escribir el output
scores <- data.frame(numero_participante,Nombre, GS1,GS2,GS3,
KO8,KO8_bonus,
KO4, KO4_bonus) %>%
group_by (numero_participante)
scores <- scores %>%
mutate(Total = sum(GS1,GS2,GS3,KO8,KO8_bonus,KO4,KO4_bonus,
na.rm = T)) %>%
ungroup %>%
arrange(desc(Total),numero_participante)
write.table(scores,"Overall_scores.csv",quote = F,sep=",",row.names = F)
write.table(scores_GS1, "GS1_complete_scores.csv",sep = ",",
quote = F ,row.names = F )
write.table(scores_GS2, "GS2_complete_scores.csv",sep = ",",
quote = F ,row.names = F )
write.table(scores_GS3, "GS3_complete_scores.csv",sep = ",",
quote = F ,row.names = F )
write.table(scores_KO8, "KO8_complete_scores.csv",sep = ",",
quote = F ,row.names = F )
write.table(KO8_score_bonus, "KO8_complete_bonus.csv",sep = ",",
quote = F ,row.names = F )
write.table(scores_KO4, "KO4_complete_scores.csv",sep = ",",
quote = F ,row.names = F )
write.table(KO4_score_bonus, "KO4_complete_bonus.csv",sep = ",",
quote = F ,row.names = F )
