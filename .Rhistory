M1 <- rowSums(M1_all)
M1 <- matches %>%
filter (Round == "M1") %>%
select(Result) %>%
as.vector() %>%
unlist() %>%
# temporalmente se dejará asi
M1_all <- map_dfc(1,~if_else( M1[.x] == picks2[,.x],true = 1,0))
M1 <- matches %>%
filter (Round == "M1") %>%
select(Result) %>%
as.vector() %>%
unlist()
M1
# temporalmente se dejará asi
M1_all <- map_dfc(1,~if_else( M1[.x] == picks2[,.x],true = 1,0))
M1_all
# temporalmente se dejará asi
M1_all <- map_dfc(1:length(M1),~if_else( M1[.x] == picks2[,.x],true = 1,0))
picks
# temporalmente se dejará asi
M1_all <- map_dfc(1:length(M1),~if_else( M1[.x] == picks2[,.x],true = 1,0))
M1 <- rowSums(M1_all)
View(M1_all)
View(M1_all)
pikcs
picks
picks2
# temporalmente se dejará asi
M1_all <- map_dfc(1:length(M1),~if_else( M1[.x] == picks2[,.x],true = 1,0)) %>%
set_names(names(picks2)[1:length(M1)])
matches <- names(picks2)
matches
matches <- names(picks2)[1:ncol(M1)]
M1
M1 <- matches %>%
filter (Round == "M1") %>%
select(Result) %>%
as.vector() %>%
unlist()
library(googlesheets4)
library(googledrive)
library(dplyr)
library(tidyr)
library(readr)
library(purrr)
# read the data
options(gargle_oauth_email = TRUE)
drive_auth(email = TRUE)
# Calificar la ronda 1
picks <- read_csv("GS1_picks.csv")
attach(picks)
matches <- drive_find(pattern = "matches",type = "spreadsheet",n_max=1)$id
matches <- read_sheet(matches) %>%
filter(complete.cases(.)) %>%
mutate(GD = abs(Goals_Local - Goals_Visitor))
picks2 <- select(picks,-c(1,2))
M1 <- matches %>%
filter (Round == "M1") %>%
select(Result) %>%
as.vector() %>%
unlist()
matches_n <- names(picks2)[1:ncol(M1)]
M1
names(picks2)
names(picks2)[1:length(M1)]
match_names <- names(picks2)[1:length(M1)]
# temporalmente se dejará asi
M1_all <- map_dfc(1:length(M1),~if_else( M1[.x] == picks2[,.x],true = 1,0)) %>%
set_names(natch_names)
match_names <- names(picks2)[1:length(M1)]
# temporalmente se dejará asi
M1_all <- map_dfc(1:length(M1),~if_else( M1[.x] == picks2[,.x],true = 1,0)) %>%
set_names(match_names)
M1_all
M1 <- rowSums(M1_all)
### Escribir el output
scores <- data.frame(numero_participante,Nombre,M1) %>%
group_by (numero_participante) %>%
mutate(Total = sum(M1)) %>%
ungroup %>%
arrange(desc(Total),numero_participante)
write.table(scores,"scores.csv",quote = F,sep=",",row.names = F)
source("~/Documents/Qatar2022/score_picks.R", echo=TRUE)
library(googlesheets4)
library(googledrive)
library(dplyr)
library(tidyr)
library(readr)
library(purrr)
# read the data
options(gargle_oauth_email = TRUE)
drive_auth(email = TRUE)
# Calificar la ronda 1
picks <- read_csv("GS1_picks.csv")
attach(picks)
matches <- drive_find(pattern = "matches",type = "spreadsheet",n_max=1)$id
matches <- read_sheet(matches) %>%
filter(complete.cases(.)) %>%
mutate(GD = abs(Goals_Local - Goals_Visitor))
library(googlesheets4)
library(googledrive)
library(dplyr)
library(tidyr)
library(readr)
library(purrr)
# read the data
options(gargle_oauth_email = TRUE)
drive_auth(email = TRUE)
# Calificar la ronda 1
picks <- read_csv("GS1_picks.csv")
attach(picks)
matches <- drive_find(pattern = "matches",type = "spreadsheet",n_max=1)$id
matches <- read_sheet(matches) %>%
filter(complete.cases(.)) %>%
mutate(GD = abs(Goals_Local - Goals_Visitor))
picks2 <- select(picks,-c(1,2))
M1 <- matches %>%
filter (Round == "M1") %>%
select(Result) %>%
as.vector() %>%
unlist()
match_names <- names(picks2)[1:length(M1)]
# temporalmente se dejará asi
M1_all <- map_dfc(1:length(M1),~if_else( M1[.x] == picks2[,.x],true = 1,0)) %>%
set_names(match_names)
M1 <- rowSums(M1_all)
### Escribir el output
scores <- data.frame(numero_participante,Nombre,M1) %>%
group_by (numero_participante) %>%
mutate(Total = sum(M1)) %>%
ungroup %>%
arrange(desc(Total),numero_participante)
M1
M1_all
scores_GS1 <- data_frame(numero_participante,Nombre,M1_all)
View(scores_GS1)
View(scores_GS1)
write.table(scores_GS1, "GS1_complete_scores.csv",sep = ",",
quote = F ,row.names = F )
library(googlesheets4)
library(googledrive)
library(dplyr)
library(tidyr)
library(readr)
library(purrr)
# read the data
options(gargle_oauth_email = TRUE)
drive_auth(email = TRUE)
# Calificar la ronda 1
picks <- read_csv("GS1_picks.csv")
attach(picks)
detach(picks)
detach(picks)
detach(picks)
detach(picks)
detach(picks)
detach(picks)
detach(picks)
detach(picks)
# Calificar la ronda 1
picks <- read_csv("GS1_picks.csv")
attach(picks)
matches <- drive_find(pattern = "matches",type = "spreadsheet",n_max=1)$id
matches <- read_sheet(matches) %>%
filter(complete.cases(.)) %>%
mutate(GD = abs(Goals_Local - Goals_Visitor))
picks2 <- select(picks,-c(1,2))
M1 <- matches %>%
filter (Round == "M1") %>%
select(Result) %>%
as.vector() %>%
unlist()
match_names <- names(picks2)[1:length(M1)]
View(picks)
View(picks)
# temporalmente se dejará asi
M1_all <- map_dfc(1:length(M1),~if_else( M1[.x] == picks2[,.x],true = 1,0)) %>%
set_names(match_names)
View(M1_all)
View(M1_all)
M1 <- rowSums(M1_all)
View(M1_all)
### Escribir el output
scores <- data.frame(numero_participante,Nombre,M1) %>%
group_by (numero_participante) %>%
mutate(Total = sum(M1)) %>%
ungroup %>%
arrange(desc(Total),numero_participante)
scores_GS1
scores_GS1
scores
scores[24,]
source("~/Documents/Qatar2022/score_picks.R", echo=TRUE)
library(googlesheets4)
library(googledrive)
library(dplyr)
library(tidyr)
library(readr)
library(purrr)
# read the data
options(gargle_oauth_email = TRUE)
drive_auth(email = TRUE)
# Calificar la ronda 1
picks <- read_csv("GS1_picks.csv")
attach(picks)
matches <- drive_find(pattern = "matches",type = "spreadsheet",n_max=1)$id
matches <- read_sheet(matches) %>%
filter(complete.cases(.)) %>%
mutate(GD = abs(Goals_Local - Goals_Visitor))
picks2 <- select(picks,-c(1,2))
GS1 <- matches %>%
filter (Round == "GS1") %>%
select(Result) %>%
as.vector() %>%
unlist()
match_names <- names(picks2)[1:length(GS1)]
# temporalmente se dejará asi
G1_all <- map_dfc(1:length(GS1),~if_else( GS1[.x] == picks2[,.x],true = 1,0)) %>%
set_names(match_names)
GS1 <- matches %>%
filter (Round == "GS1") %>%
select(Result) %>%
as.vector() %>%
unlist()
GS1
matches
GS1 <- matches %>%
filter (Round == "M1") %>%
select(Result) %>%
as.vector() %>%
unlist()
match_names <- names(picks2)[1:length(GS1)]
# temporalmente se dejará asi
G1_all <- map_dfc(1:length(GS1),~if_else( GS1[.x] == picks2[,.x],true = 1,0)) %>%
set_names(match_names)
GS1 <- rowSums(GS1_all)
# temporalmente se dejará asi
G1_all <- map_dfc(1:length(GS1),~if_else( GS1[.x] == picks2[,.x],true = 1,0)) %>%
set_names(match_names)
GS1 <- rowSums(GS1_all)
# temporalmente se dejará asi
GS1_all <- map_dfc(1:length(GS1),~if_else( GS1[.x] == picks2[,.x],true = 1,0)) %>%
set_names(match_names)
GS1 <- rowSums(GS1_all)
source("~/Documents/Qatar2022/generate_picks_GS1.R", echo=TRUE)
ls
library(googledrive)
library(googlesheets4)
library(corrplot)
library(viridis)
library(dplyr)
library(readr)
library(stringr)
library(tidyr)
options(gargle_oauth_email = TRUE)
drive_auth(email = TRUE)
picks_id <- drive_find(type = "spreadsheet",pattern = "Group_Stage3_respuestas",
n_max = 1)$id
picks <- read_sheet(picks_id)
picks$numero_participante <- as.character( as.character(picks$numero_participante)) %>%
str_pad(pad = "0", side = "left", width = 3)
bets <- picks[,c(5,4,6:ncol(picks))] %>%
tibble() %>%
arrange(numero_participante)
write.table(bets,"GS3_picks.csv",sep=",",
quote = F,
row.names =F )
View(bets)
View(bets)
library(googledrive)
library(googlesheets4)
library(corrplot)
library(viridis)
library(dplyr)
library(readr)
library(stringr)
library(tidyr)
options(gargle_oauth_email = TRUE)
drive_auth(email = TRUE)
picks_id <- drive_find(type = "spreadsheet",pattern = "Group_Stage3_respuestas",
n_max = 1)$id
picks <- read_sheet(picks_id)
library(googledrive)
library(googlesheets4)
library(corrplot)
library(viridis)
library(dplyr)
library(readr)
library(stringr)
library(tidyr)
options(gargle_oauth_email = TRUE)
drive_auth(email = TRUE)
picks_id <- drive_find(type = "spreadsheet",pattern = "Group_Stage3_respuestas",
n_max = 1)$id
picks <- read_sheet(picks_id)
picks$numero_participante <- as.character( as.character(picks$numero_participante)) %>%
str_pad(pad = "0", side = "left", width = 3)
bets <- picks[,c(5,4,6:ncol(picks))] %>%
tibble() %>%
arrange(numero_participante)
View(bets)
View(bets)
write.table(bets,"GS3_picks.csv",sep=",",
quote = F,
row.names =F )
bets2 <- pivot_longer(bets,3:ncol(bets),
names_to = "Match",
values_to = "Bet") %>%
nest(-`Match`)
result_pics <- lapply(1:16,function(x){
freqs <- bets2$data[[x]]$Bet %>%
table()
prop <- prop.table(freqs)
return(prop)
}) %>%
setNames(bets2$Match)
png("media/picks_GS3.png",width = 20,height = 20,units = "cm",
res = 196)
par(mfrow = c(4,4),
mar = c( 3,3,3,3),
bg = "gray85")
colors <- c("black","tomato3","darkolivegreen")
lapply(1:16, function(x){
Match <- as.character(x) %>%
str_pad(side = "left",pad = "0",width = 2) %>%
paste("flags/matches/Match",.,".png",sep = '')
pie(result_pics[[x]],col = colors,
main = names(result_pics)[x],
border = "NA")
}
)
dev.off()
bets2 <- bets[,3:ncol(bets)]
dims <- dim(bets2)
similarities <- matrix(NA, dims[1],dims[1],
dimnames = list(bets$numero_participante,bets$numero_participante))
for (i in 1:nrow(bets2) ){
x <- bets2[i,]
y <- apply(bets2,1,"==",x) %>%
colSums
similarities[i,] <- y
}
similarities <- similarities / 16 * 100
diag(similarities) <- NA
png(filename = "media/similarities_GS3.png",
width = 10,height = 10,units = "cm",res = 196)
par = c(bg = "gray85")
corrplot(similarities,
method = "color",
col = plasma(50), diag = F,
addgrid.col = T,tl.col = "Black",
order = "hclust",   main = "Similitud entre jugadores",
mar = c(1,1,1,1),cex.main = 1,
is.corr = F,
type = "full",
hclust.method = "ward.D",tl.cex = 0.5,
number.digits = 0,cl.cex = 0.5)
dev.off()
delta_participants <- colMeans(similarities,na.rm = T)
bets$delta <- delta_participants
top <- bets %>%
arrange(delta) %>%
select(1:2) %>%
head(n = 5)
write.table(top,"top_GS3.csv",
sep = ',',
quote = F,
row.names = F)
library(googlesheets4)
library(googledrive)
library(dplyr)
library(tidyr)
library(readr)
library(purrr)
# read the data
options(gargle_oauth_email = TRUE)
drive_auth(email = TRUE)
# Calificar la ronda 1
GS1_picks <- read_csv("GS1_picks.csv")
matches <- drive_find(pattern = "matches",type = "spreadsheet",n_max=1)$id
matches <- read_sheet(matches) %>%
filter(complete.cases(.)) %>%
mutate(GD = abs(Goals_Local - Goals_Visitor))
GS1_picks2 <- select(GS1_picks,-c(1,2))
library(googlesheets4)
library(googledrive)
library(dplyr)
library(tidyr)
library(readr)
library(purrr)
# read the data
options(gargle_oauth_email = TRUE)
drive_auth(email = TRUE)
# Calificar la ronda 1
GS1_picks <- read_csv("GS1_picks.csv")
matches <- drive_find(pattern = "matches",type = "spreadsheet",n_max=1)$id
matches <- read_sheet(matches) %>%
filter(complete.cases(.)) %>%
mutate(GD = abs(Goals_Local - Goals_Visitor))
GS1_picks2 <- select(GS1_picks,-c(1,2))
GS1 <- matches %>%
filter (Round == "M1") %>%
select(Result) %>%
as.vector() %>%
unlist()
attach(GS1_picks)
match_names <- names(GS1_picks2)[1:length(GS1)]
# temporalmente se dejará asi
GS1_all <- map_dfc(1:length(GS1),~if_else( GS1[.x] == GS1_picks2[,.x],true = 1,0)) %>%
set_names(match_names)
cumsum_gs1 <- apply(GS1_all,1,cumsum)
GS1 <- rowSums(GS1_all)
scores_GS1 <- data.frame(numero_participante,Nombre,GS1_all)
# Calificar la ronda 2
GS2_picks <- read_csv("GS2_picks.csv")
GS1 <- rowSums(GS1_all)
scores_GS1 <- data.frame(numero_participante,Nombre,GS1_all)
# Calificar la ronda 2
GS2_picks <- read_csv("GS2_picks.csv")
matches <- drive_find(pattern = "matches",type = "spreadsheet",n_max=1)$id
matches <- read_sheet(matches) %>%
filter(complete.cases(.)) %>%
mutate(GD = abs(Goals_Local - Goals_Visitor))
GS2_picks2 <- select(GS2_picks,-c(1,2))
GS2 <- matches %>%
filter (Round == "M2") %>%
select(Result) %>%
as.vector() %>%
unlist()
match_names <- names(GS2_picks2)[1:length(GS2)]
# temporalmente se dejará asi
GS2_all <- map_dfc(1:length(GS2),~if_else( GS2[.x] == GS2_picks2[,.x],true = 1,0)) %>%
set_names(match_names)
GS2 <- rowSums(GS2_all)
scores_GS2 <- data.frame(numero_participante,Nombre,GS2_all)
# Calificar la ronda 3
GS3_picks <- read_csv("GS3_picks.csv")
matches <- drive_find(pattern = "matches",type = "spreadsheet",n_max=1)$id
matches <- read_sheet(matches) %>%
filter(complete.cases(.)) %>%
mutate(GD = abs(Goals_Local - Goals_Visitor))
GS3_picks2 <- select(GS3_picks,-c(1,2))
GS3 <- matches %>%
filter (Round == "M3") %>%
select(Result) %>%
as.vector() %>%
unlist()
match_names <- names(GS3_picks2)[1:length(GS3)]
# temporalmente se dejará asi
GS3_all <- map_dfc(1:length(GS3),~if_else( GS3[.x] == GS3_picks2[,.x],true = 1,0)) %>%
set_names(match_names)
View(GS3_picks2)
View(GS3_picks2)
View(GS3_picks)
View(GS3_picks)
match_names <- names(GS3_picks2)[1:length(GS3)]
# temporalmente se dejará asi
GS3_all <- map_dfc(1:length(GS3),~if_else( GS3[.x] == GS3_picks2[,.x],true = 1,0)) %>%
set_names(match_names)
GS3 <- rowSums(GS3_all)
scores_GS3 <- data.frame(numero_participante,Nombre,GS3_all)
### Escribir el output
scores <- data.frame(numero_participante,Nombre, GS1,GS2,GS3) %>%
group_by (numero_participante) %>%
mutate(Total = sum(GS1,GS2,GS3)) %>%
ungroup %>%
arrange(desc(Total),numero_participante)
write.table(scores,"Overall_scores.csv",quote = F,sep=",",row.names = F)
write.table(scores_GS1, "GS1_complete_scores.csv",sep = ",",
quote = F ,row.names = F )
write.table(scores_GS2, "GS2_complete_scores.csv",sep = ",",
quote = F ,row.names = F )
write.table(scores_GS3, "GS3_complete_scores.csv",sep = ",",
quote = F ,row.names = F )
source("~/Documents/GitHub/Qatar2022/score_picks.R", echo=TRUE)
ls
GS3_all
GS1_picks2 <- select(GS1_picks,-c(1,2))
GS1 <- matches %>%
filter (Round == "M1") %>%
select(Result) %>%
as.vector() %>%
unlist()
attach(GS1_picks)
match_names <- names(GS1_picks2)[1:length(GS1)]
# temporalmente se dejará asi
GS1_all <- map_dfc(1:length(GS1),~if_else( GS1[.x] == GS1_picks2[,.x],true = 1,0)) %>%
set_names(match_names)
GS1 <- rowSums(GS1_all)
scores_GS1 <- data.frame(numero_participante,Nombre,GS1_all)
# Calificar la ronda 2
GS2_picks <- read_csv("GS2_picks.csv")
matches <- drive_find(pattern = "matches",type = "spreadsheet",n_max=1)$id
matches <- read_sheet(matches) %>%
filter(complete.cases(.)) %>%
mutate(GD = abs(Goals_Local - Goals_Visitor))
GS2_picks2 <- select(GS2_picks,-c(1,2))
GS2 <- matches %>%
filter (Round == "M2") %>%
select(Result) %>%
as.vector() %>%
unlist()
match_names <- names(GS2_picks2)[1:length(GS2)]
# temporalmente se dejará asi
GS2_all <- map_dfc(1:length(GS2),~if_else( GS2[.x] == GS2_picks2[,.x],true = 1,0)) %>%
set_names(match_names)
GS2 <- rowSums(GS2_all)
scores_GS2 <- data.frame(numero_participante,Nombre,GS2_all)
# Calificar la ronda 3
GS3_picks <- read_csv("GS3_picks.csv")
matches <- drive_find(pattern = "matches",type = "spreadsheet",n_max=1)$id
